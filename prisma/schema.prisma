generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  email           String           @unique
  password        String
  name            String
  avatar          String?
  role            String           @default("student")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  chatLimits      ChatLimit?
  flashcards      Flashcard[]
  teacherLectures Lecture[]        @relation("TeacherLectures")
  lectures        Lecture[]
  quizzes         Quiz[]
  studyActivities StudyActivity[]
  studyProgress   StudyProgress[]
  enrolledClasses TeacherStudent[] @relation("Student")
  taughtClasses   TeacherStudent[] @relation("Teacher")

  @@map("users")
}

model Lecture {
  id              String          @id @default(cuid())
  userId          String          @map("user_id")
  teacherId       String          @map("teacher_id")
  filename        String
  originalName    String          @map("original_name")
  fileType        String          @map("file_type")
  fileSize        BigInt          @map("file_size")
  content         String
  summaryData     Json?           @map("summary_data")
  isPublic        Boolean         @default(false) @map("is_public")
  permissions     Json?
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  flashcards      Flashcard[]
  teacher         User            @relation("TeacherLectures", fields: [teacherId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizzes         Quiz[]
  studyActivities StudyActivity[]
  studyProgress   StudyProgress[]

  @@map("lectures")
}

model TeacherStudent {
  id        String   @id @default(cuid())
  teacherId String   @map("teacher_id")
  studentId String   @map("student_id")
  createdAt DateTime @default(now()) @map("created_at")
  student   User     @relation("Student", fields: [studentId], references: [id], onDelete: Cascade)
  teacher   User     @relation("Teacher", fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, studentId])
  @@map("teacher_students")
}

model StudyProgress {
  id                   String          @id @default(cuid())
  userId               String          @map("user_id")
  lectureId            String          @map("lecture_id")
  searchTabProgress    Float           @default(0) @map("search_tab_progress")
  chatTabProgress      Float           @default(0) @map("chat_tab_progress")
  quizTabProgress      Float           @default(0) @map("quiz_tab_progress")
  flashcardTabProgress Float           @default(0) @map("flashcard_tab_progress")
  totalProgress        Float           @default(0) @map("total_progress")
  quizProgress         Json?           @map("quiz_progress")
  reviewProgress       Json?           @map("review_progress")
  practiceProgress     Json?           @map("practice_progress")
  sessionData          Json?           @map("session_data")
  lastUpdated          DateTime        @default(now()) @map("last_updated")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  activities           StudyActivity[]
  lecture              Lecture         @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@map("study_progress")
}

model StudyActivity {
  id              String        @id @default(cuid())
  userId          String        @map("user_id")
  lectureId       String        @map("lecture_id")
  studyProgressId String        @map("study_progress_id")
  activityType    String        @map("activity_type")
  tabName         String?       @map("tab_name")
  progressValue   Float         @map("progress_value")
  duration        Int?
  metadata        Json?
  createdAt       DateTime      @default(now()) @map("created_at")
  lecture         Lecture       @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  studyProgress   StudyProgress @relation(fields: [studyProgressId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_activities")
}

model Flashcard {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  lectureId    String   @map("lecture_id")
  frontContent String   @map("front_content")
  backContent  String   @map("back_content")
  difficulty   String   @default("medium")
  category     String?
  masteryLevel Int      @default(0) @map("mastery_level")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lecture      Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("flashcards")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  questions   Json
  difficulty  String   @default("mixed")
  lectureId   String   @map("lecture_id")
  teacherId   String   @map("teacher_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  lecture     Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  teacher     User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model ChatLimit {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  dailyLimit    Int      @default(3) @map("daily_limit")
  usedCount     Int      @default(0) @map("used_count")
  lastResetDate DateTime @default(now()) @map("last_reset_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_limits")
}
